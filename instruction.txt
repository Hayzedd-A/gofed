üèóÔ∏è Project Goal

Create a full Next.js 15.5 application (in JavaScript) using the App Router that allows users to:

Submit a product-search form (with optional image).

The backend uses OpenAI/ChatGPT to analyze the image and combine its insights with other form data to search a MongoDB product database.

Display results in a compact list-style grid with image, title, and brand name.

Clicking an item opens a modal showing full product details and a ‚ÄúView on Website‚Äù button linking to the productUrl.

Provide an admin interface and API for managing (CRUD) products in the same MongoDB.

üß© Core Features

Next.js 15.5 App Router with Server Components, Route Handlers, Server Actions where appropriate.

Tailwind CSS for styling with a professional, responsive UI.

Futura PT font:

<link href="https://fonts.cdnfonts.com/css/futura-pt" rel="stylesheet">


Theme color: #2b3a55.

MongoDB + Mongoose for the Product model.

OpenAI API (ChatGPT Vision) for image analysis.

multer for image upload handling.

Axios or fetch for external calls.

Sharp (optional) for image resizing/optimization.

Full CRUD admin API + simple admin page for product management.

üìÇ File Structure
/app
  /layout.js
  /page.js                     -> Home + Search form
  /search/page.js              -> Search result page
  /search/components/Form.jsx
  /search/components/Results.jsx
  /search/components/ProductModal.jsx
  /admin/page.js               -> Admin dashboard UI (list + CRUD)
  /admin/components/Form.jsx   -> Add/Edit product
  /admin/components/List.jsx   -> Products table
/public/uploads                -> temporary uploaded images
/lib/db.js                     -> mongoose connection helper
/models/product.js             -> mongoose schema
/utils/functions.js            -> shared helpers (converted from express prototype)
/utils/openaiClient.js         -> openai vision wrapper
/utils/fileHelpers.js          -> image save/delete helpers
/pages/api
  /products/search.js           -> handles user search
  /products/manage.js           -> handles admin CRUD (GET,POST,PUT,DELETE)
  /marketing/index.js           -> forwards marketing payload to webhook
tailwind.config.js
postcss.config.js
package.json
README.md
.env.example

üß† Product Schema (/models/product.js)
const mongoose = require('mongoose');

const ProductSchema = new mongoose.Schema({
  productName: String,
  colorwayName: String,
  imageUrl: String,
  shortDescription: String,
  application: String,
  keywords: [String],
  colorPalette: [String],
  performance: String,
  specSheetLink: String,
  brandName: String,
  designerNote: String,
  productUrl: String,
  processed: { type: String, default: '' },
}, { timestamps: true });

module.exports = mongoose.models.Product || mongoose.model('Product', ProductSchema);


Include data/sample-products.json to seed the database.

üßæ Frontend Form Fields
{
  "email": "email",
  "projectname": "string",
  "sector": ["hospitality","corporate/workspace","healthcare","education","multi-family","cruise Line","senior living","others"],
  "budgetTier": ["budget","mid","luxury"],
  "keywords": "comma,separated,values",
  "image": "<file>"
}


sector, keywords, and optional image drive the search.

The full form (except image) is also POSTed to
https://hook.us2.make.com/naut5o6pqb67b9igrav3fwtkoggncxkd for marketing.

üîÑ Backend Flow

POST /api/products/search (multipart/form-data).

Validate inputs.

If image uploaded:

Save temporarily to /public/uploads.

Create a public URL ${NEXT_PUBLIC_BASE_URL}/uploads/<filename>.

Send URL to OpenAI Vision (OPENAI_API_KEY).

Parse response to extract keywords/tags/colors.

Combine extracted image tags + form keywords + sector into a MongoDB $or query on fields:
productName, shortDescription, keywords, colorPalette, application, brandName.

Limit 20 results, sort by relevance.

Forward marketing payload to MARKETING_WEBHOOK_URL.

Delete temporary image in finally.

Return JSON {products: [...]}.

Admin API (/api/products/manage)

GET: list all products (paginated).

POST: add product.

PUT: update product by ID.

DELETE: remove product by ID.

Protect with simple ADMIN_TOKEN env variable header check (basic auth-like).

üñ•Ô∏è UI & Design Details

Global styling via Tailwind + Futura PT.

Theme color #2b3a55 for headings, buttons, accents.

Home Page:

Centered form in card layout.

Submit button triggers loading spinner.

Search Results Page:

Compact list/grid layout ‚Äî like small cards in a vertical scroll list.

Each item: small image (thumb), product name, brand name.

Clicking item opens modal (ProductModal.jsx) showing:

Full product details

Image

‚ÄúView on Website‚Äù button ‚Üí productUrl

Admin Page:

Table of products (small rows).

Add/Edit/Delete using modal forms.

CRUD operations call /api/products/manage.

üîê Env Variables
MONGODB_URI=
OPENAI_API_KEY=
NEXT_PUBLIC_BASE_URL=http://localhost:3000
MARKETING_WEBHOOK_URL=https://hook.us2.make.com/naut5o6pqb67b9igrav3fwtkoggncxkd
ADMIN_TOKEN=your_secret_token
PORT=3300

üß∞ Packages to Install
next@15.5
react react-dom
tailwindcss postcss autoprefixer
mongoose
multer
openai
axios
sharp
dotenv

üß© Utilities

/lib/db.js ‚Äì Mongoose connection singleton.

/utils/openaiClient.js ‚Äì Handles vision/image ‚Üí keywords extraction.

/utils/fileHelpers.js ‚Äì save/delete uploaded files.

/utils/functions.js ‚Äì converted Express prototype helpers.

‚úÖ Acceptance Criteria

npm install && npm run dev starts the app successfully.

Submitting form (with/without image) returns products from MongoDB.

Webhook receives form data (check network tab/log).

Search results render correctly with compact list/grid layout.

Modal shows product details and ‚ÄúView on Website‚Äù button.

Admin page allows CRUD operations on products.

Temporary images deleted after each request.

Responsive UI, clean typography (Futura PT), theme color consistent.

üìò README should include

Setup steps & environment variables.

How to seed sample data.

Notes on using OpenAI Vision.

Local vs Production tips (image URL base).

Admin API usage example.

https://auth.qodo.ai/pre_sign_in.html?sign_in_link=aHR0cHM6Ly9jb2RpdW0tZGV2LTM2MDgxMi5maXJlYmFzZWFwcC5jb20vX18vYXV0aC9hY3Rpb24/YXBpS2V5PUFJemFTeUNNTXluWW01VlJIajFOT3drZldpblgtSFlzRkFyZFViayZtb2RlPXNpZ25JbiZvb2JDb2RlPWZVeFVFRVZySFBjM1paOGNEYUVfZi0tbHRyY1RjdGMyOFd4SUVIR205WjRBQUFHWnhsV3dwUSZjb250aW51ZVVybD1odHRwczovL3FvZG8tcGxhdGZvcm0ucW9kby5haS9hdXRoL3YxL29pZGMvYXV0aG9yaXplL2NhbGxiYWNrL2VtYWlsP3N0YXRlJTNEZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnlaV1JwY21WamRGOTFjbWtpT2lKb2RIUndjem92TDJGd2NDNXhiMlJ2TG1GcEwzTnBaMjVwYmk5emRXTmpaWE56TFhOcFoyNXBiaTFsZUhSbGNtNWhiQzFqYkdsbGJuUV9ZWFYwYUY5Mk1qMTBjblZsSm1sdWFYUmZZMnhwWlc1MFBYWnpZMjlrWlNaelpYTnphVzl1WDJsa1BUWmlObVF4TnpBMUxXVTFZVFV0TkRrNE1DMDRNVGcxTFROa1lXTXhPVEJqWXpCbVpTWjBjbUZqWlY5cFpEMWtNbVZpTnpVMU9DMW1ZV0UxTFRSbU56QXRZVE0wWmkwNFptUTFPV0l3WWpWbFptVWlMQ0p3Y205MmFXUmxjaUk2SW1WdFlXbHNJaXdpZEhKaFkyVmZhV1FpT2lKa01tVmlOelUxT0MxbVlXRTFMVFJtTnpBdFlUTTBaaTA0Wm1RMU9XSXdZalZsWm1VaUxDSnlaWE53YjI1elpWOTBlWEJsSWpvaVkyOWtaU0lzSW5OamIzQmxJam9pYjNCbGJtbGtJSEJ5YjJacGJHVWdaVzFoYVd3Z2IyWm1iR2x1WlY5aFkyTmxjM01pTENKaFpHUnBkR2x2Ym1Gc1gzQmhjbUZ0Y3lJNmV5SnlaV1JwY21WamRGUnZJam9pYUhSMGNITTZMeTloY0hBdWNXOWtieTVoYVM5emFXZHVhVzR2YzNWalkyVnpjeTF6YVdkdWFXNHRaWGgwWlhKdVlXd3RZMnhwWlc1MFAyRjFkR2hmZGpJOWRISjFaU1pwYm1sMFgyTnNhV1Z1ZEQxMmMyTnZaR1VtYzJWemMybHZibDlwWkQwMllqWmtNVGN3TlMxbE5XRTFMVFE1T0RBdE9ERTROUzB6WkdGak1Ua3dZMk13Wm1VbWRISmhZMlZmYVdROVpESmxZamMxTlRndFptRmhOUzAwWmpjd0xXRXpOR1l0T0daa05UbGlNR0kxWldabElpd2ljMlZ6YzJsdmJsOXBaQ0k2SWpaaU5tUXhOekExTFdVMVlUVXRORGs0TUMwNE1UZzFMVE5rWVdNeE9UQmpZekJtWlNJc0ltbHVhWFJmWTJ4cFpXNTBJam9pZG5OamIyUmxJbjBzSW1WdFlXbHNJam9pWVhwbFpYcEFhVzUwWld4cFlTNXBieUlzSW5ObGMzTnBiMjVmYVdRaU9pSTJZalprTVRjd05TMWxOV0UxTFRRNU9EQXRPREU0TlMwelpHRmpNVGt3WTJNd1ptVWlMQ0pwYm1sMFgyTnNhV1Z1ZENJNkluWnpZMjlrWlNJc0ltVjRjQ0k2TVRjMk1EVTJPVEV5T0gwLkZ0eXBvRWczTHhOeWFKN3pZTnhvaDEyUFZMTVRwZVZyVzVjblpsbE80TTAlMjZlbWFpbCUzRGF6ZWV6QGludGVsaWEuaW8lMjZ0cmFjZV9pZCUzRGQyZWI3NTU4LWZhYTUtNGY3MC1hMzRmLThmZDU5YjBiNWVmZSZsYW5nPWVu